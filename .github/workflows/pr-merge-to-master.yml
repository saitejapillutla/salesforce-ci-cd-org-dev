# Unique name for this workflow
name: Quick Deploy using Job ID

# Definition when the workflow should run
on:

  push:
    branches: [ devolopment ]

jobs:
  initial-setup:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Install Salesforce CLI'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
            mkdir ~/sfdx
            tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
            echo "$HOME/sfdx/bin" >> $GITHUB_PATH
            ~/sfdx/bin/sfdx version

      - name: 'Installing java'
        run: |
          sudo apt-get update
          sudo apt install default-jdk

      - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

      run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

      - name: 'Populate auth file with SFDX_URL secret of integration org'
        shell: bash
        run: |
             echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file
      - name: 'Authenticate to Integration Org'
        run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration


      - name: 'Deploy Delta changes - Run specified tests'
              if: ${{ env.APEX_TESTS != 'None' }}
              run: |
                  echo Tests that are about to Run during validation are :: ${{env.APEX_TESTS}}
                  sfdx force:source:deploy --manifest "manifest/package.xml" --postdestructivechanges "manifest/destructiveChangesPost.xml" -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --verbose
              
      - name: 'Deploy Delta changes - Run No tests'
              if: ${{ env.APEX_TESTS == 'None' }}
              run: |
                  sfdx force:source:deploy --manifest "manifest/package.xml" --postdestructivechanges "manifest/destructiveChangesPost.xml" -c -l NoTestRun --verbose   

# step - name: 'clean up post deployment' this method will clean up files in force-app\main\default\classes\UltimateClass.cls-meta.xmlforce-app\main\default\ in default folder and make a commit


      - name: Set Git identity
        run: |
             git config --global user.email "github-actions-bot@github.com"
             git config --global user.name "GitHub Actions"

      - name: 'Clean up post deployment'
        run: |
            cd force-app/main/default
            shopt -s extglob
            rm -rf !(.gitkeep)
            git checkout CICD_WS_Template_DoNotUse
            git add  .
            git commit -m "BOT: Clean up post deployment"
            git push

